{"version":3,"file":"static/js/676.1980ef20.chunk.js","mappings":"mPAyEA,UAhEoB,WAClB,OAAgDA,EAAAA,EAAAA,UAASC,KAAKC,OAA9D,eAAOC,EAAP,KAAyBC,EAAzB,KAEQC,GAAgBC,EAAAA,EAAAA,MAAhBD,YACVE,QAAQC,IAAIH,IACVI,EAAAA,EAAAA,YAAU,WACR,IAAKJ,EAAYK,SAAS,KAAM,CAC9B,IAAMC,EAASN,EAAYO,MAAM,KAC3BC,EAAO,CAAEC,MAAOH,EAAO,GAAK,KAAMI,OAAQJ,EAAO,IAEvDP,GAAoB,SAAAY,GAClB,OAAOC,EAAAA,EAAqBJ,EAC7B,GACF,CACF,GAAC,CAACV,EAAkBE,IAErB,IAAMa,EAAWD,EAAAA,EAAqBd,GAEhCgB,EAAUF,EAAAA,EAAuBd,GAEjCiB,EAAYH,EAAAA,EAAoBC,GAEhCG,EAAUJ,EAAAA,EAAsBE,GAGhCG,EAAYL,EAAAA,EAA0B,CAC1CM,MAAOH,EACPI,IAAKH,IAEDI,EAAS,SAAAZ,GAEb,IADA,IAAMY,EAAQ,GACLC,EAAM,EAAGA,GAAO,EAAGA,IAC1BD,EAAME,KAAKL,EAAUI,IAEvB,OAAOD,CACR,CANc,GAQf,OACE,0BAQE,iBACEG,MAAO,CACLC,QAAS,OACTC,oBAAqB,iBACrBC,IAAK,QAJT,UAOGN,EAAMO,KAAI,SAAAC,GAAI,OACb,0BAAkBhB,EAAAA,EAAegB,EAzDtB,SAyDAA,EADE,IAGdX,EAAUU,KAAI,SAAAnB,GAAI,OACjB,gCAAmBI,EAAAA,EAAeJ,EA3DxB,OA2DCA,EADM,QAM1B,C","sources":["components/ChooseMonth/ChooseMonth.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport * as dateFns from 'date-fns';\n\n// const formatofYear = 'yyy';\n// const formatOfMonth = 'MMM';\nconst formatofWeek = 'EEEE';\nconst formatOfDay = 'd';\n\nconst ChooseMonth = () => {\n  const [currentDateStart, setCurrentDateStart] = useState(Date.now());\n\n  const  {currentDate}  = useParams();\nconsole.log(currentDate)\n  useEffect(() => {\n    if (!currentDate.includes(':')) {\n      const result = currentDate.split('.');\n      const date = { years: result[0] - 1970, months: result[1] };\n\n      setCurrentDateStart(prev => {\n        return dateFns.milliseconds(date);\n      });\n    }\n  },[currentDateStart, currentDate]);\n  //Find the first day of current Date\n  const firstDay = dateFns.startOfMonth(currentDateStart);\n  //Find the last day of current Date\n  const lastDay = dateFns.lastDayOfMonth(currentDateStart);\n  ////Ein Find the first day of week of firstDay\n  const startDate = dateFns.startOfWeek(firstDay);\n  //Find the last day of week of lastDay\n  const endDate = dateFns.lastDayOfWeek(lastDay);\n  //render all days\n\n  const totalDate = dateFns.eachDayOfInterval({\n    start: startDate,\n    end: endDate,\n  });\n  const weeks = (date => {\n    const weeks = [];\n    for (let day = 1; day <= 7; day++) {\n      weeks.push(totalDate[day]);\n    }\n    return weeks;\n  })(currentDate);\n\n  return (\n    <div>\n      {/* <div style={{ display: 'flex', justifyContent: 'space-around', margin: '1rem 0' }}>\n         <button onClick={() => setCurrentDate(dateFns.subMonths(currentDate, 1))}>last</button>\n             <span>\n             {dateFns.format(currentDate, formatOfMonth)} {dateFns.format(currentDate, formatofYear)}\n             </span>\n         <button onClick={()=> setCurrentDate(dateFns.addMonths (currentDate, 1)) }>next</button>\n     </div> */}\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(7, 1fr)',\n          gap: '1rem',\n        }}\n      >\n        {weeks.map(week => (\n          <span key={week}>{dateFns.format(week, formatofWeek)}</span>\n        ))}\n        {totalDate.map(date => (\n          <span key={date}> {dateFns.format(date, formatOfDay)}</span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChooseMonth;\n"],"names":["useState","Date","now","currentDateStart","setCurrentDateStart","currentDate","useParams","console","log","useEffect","includes","result","split","date","years","months","prev","dateFns","firstDay","lastDay","startDate","endDate","totalDate","start","end","weeks","day","push","style","display","gridTemplateColumns","gap","map","week"],"sourceRoot":""}