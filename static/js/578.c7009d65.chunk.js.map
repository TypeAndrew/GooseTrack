{"version":3,"file":"static/js/578.c7009d65.chunk.js","mappings":"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","sources":["webpack://react-goose-track/./src/components/CalenadarSelecor/CalendarSelector.module.css?ed6c","components/constants/MONTNKEY.js","components/CalenadarSelecor/CalendarSelector.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/_lib/toInteger/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/getDate/index.js","../node_modules/date-fns/esm/getMonth/index.js","../node_modules/date-fns/esm/getTime/index.js","../node_modules/date-fns/esm/getYear/index.js","../node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"calendar\":\"CalendarSelector_calendar__bId1g\",\"month\":\"CalendarSelector_month__nZ7SR\",\"selector\":\"CalendarSelector_selector__fdrLB\",\"monhtchang\":\"CalendarSelector_monhtchang__n4nTc\",\"btn_left\":\"CalendarSelector_btn_left__OpNLe\",\"btn_ringt\":\"CalendarSelector_btn_ringt__mfK41\",\"viue\":\"CalendarSelector_viue__GeFQD\",\"btn_changL\":\"CalendarSelector_btn_changL__i3AyD\",\"btn_changR\":\"CalendarSelector_btn_changR__R+APE\",\"selected_limit\":\"CalendarSelector_selected_limit__88AQS\",\"isActive\":\"CalendarSelector_isActive__hiOyR\"};","export const MONTNKEY = {\n    0:'January',\n    1:\"February\",\n    2:'March',\n    3:'April',\n    4:'May',\n    5:'June',\n    6:'July',\n    7:'August',\n    8:'September',\n    9:'October',\n    10:'November',\n    11:\"December\",\n}","import { addMonths, getDate, getMonth, getTime, getYear } from 'date-fns';\nimport css from './CalendarSelector.module.css';\n\nimport { NavLink, useNavigate, useParams } from 'react-router-dom';\nimport { MONTNKEY } from '../constants/MONTNKEY';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  currentDay,\n  currentMonth,\n  currentTime,\n  currentYear,\n} from 'Redux/calendar/calendar.slice';\n\n\n\nconst currentStartDay = `${getYear(Date.now())}.${getMonth(\n  Date.now()\n)}.${getDate(Date.now())}`;\n\n\nconst CalendarSelector = props => {\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  // const day = useSelector(state => state.calendar.day);\n  const month = useSelector(state => state.calendar.month);\n  const year = useSelector(state => state.calendar.year);\n  const time = useSelector(state => state.calendar.time) ?? Date.now();\n \n\n  let stopUpdateParamas = true\n  let btnBack= getYear(Date.now()) >= year && getMonth(Date.now()) >= month;\n\n  const params = useParams();\n\n\n  if (params.currentDate?.includes('.')) {\n    const result = params.currentDate.split('.');\n    const asd =  Number(result[0]) === year && Number(result[1]) === month;\n    if (!asd&&stopUpdateParamas) {\n      stopUpdateParamas = false\n      dispatch(currentMonth(Number(result[1])));\n      dispatch(currentYear(Number(result[0])));\n      navigate(`month/${result[0]}.${Number(result[1])}`)  }\n  }\n\n  if (year === null) {\n    dispatch(currentTime(time));\n    dispatch(currentDay(getDate(time)));\n    dispatch(currentMonth(getMonth(time)));\n    dispatch(currentYear(getYear(time)));\n  }\n\n  const handleChangMonthBack = () => {\n    dispatch(currentTime(getTime(addMonths(time, -1))));\n    dispatch(currentMonth(getMonth(addMonths(time, -1))));\n    dispatch(currentYear(getYear(addMonths(time, -1))));\n   stopUpdateParamas = false\n    navigate(\n      `month/${getYear(addMonths(time, -1))}.${getMonth(addMonths(time, -1))}`\n    );\n\n    if (getMonth(Date.now()) >= month && getYear(Date.now()) >= year) {\n      btnBack = true;\n\n    } else {\n      btnBack = false;\n    }\n\n  };\n\n  const handleChangMonthForward = () => {\n    dispatch(currentTime(getTime(addMonths(time, 1))));\n    dispatch(currentMonth(getMonth(addMonths(time, 1))));\n    dispatch(currentYear(getYear(addMonths(time, 1))));\n    stopUpdateParamas = false\n    navigate(\n      `month/${getYear(addMonths(time, 1))}.${getMonth(addMonths(time, 1))}`\n    );\n\n  };\n  \n  const handleCurrentPage = ({ isActive }) => {\n    return isActive ? css.isActive : '';\n  };\n  const colordisable = btnBack?\"#DCE3E5\":\"#616161\"\n  return (\n    <>\n      <div className={css.calendar}>\n        <div className={css.selector}>\n          <span className={css.month}>\n            {MONTNKEY[month]} {year}\n          </span>\n          <div className={css.monthchang}>\n            <button\n              onClick={handleChangMonthBack}\n              type=\"button\"\n              disabled={btnBack}\n              className={css.btn_left}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"6\" height=\"10\" fill=\"none\"><path stroke={colordisable} stroke-linecap=\"round\" stroke-linejoin=\"round\" strokeWidth=\"1.5\"  d=\"M5 9 1 5l4-4\"/></svg>\n            </button>\n            <button\n              onClick={handleChangMonthForward}\n              type=\"button\"\n              className={css.btn_ringt}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"6\" height=\"10\" fill=\"none\"><path stroke=\"#616161\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-Width=\"1.5\" d=\"m1 9 4-4-4-4\"/></svg>\n            </button>\n          </div>\n        </div>\n        <ul className={css.viue}>\n          <li>\n            <NavLink\n              to={`month/${year}.${month}`}\n              className={data => handleCurrentPage(data) + ' ' + css.btn_changL}\n            >\n              Month\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to={`day/${currentStartDay}`}\n              className={data => handleCurrentPage(data) + ' ' + css.btn_changR}\n            >\n              Day\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default CalendarSelector;\n","import CalendarSelector from 'components/CalenadarSelecor/CalendarSelector';\nimport { SpinnerGrid } from 'components/Spinner/Grid';\nimport { Suspense } from 'react';\n\n\nimport { Outlet, useParams } from 'react-router-dom';\n\nconst CalendarPage = () => {\n  const params = useParams();\n\n  return (\n    <>\n      {params.currentDate && <CalendarSelector />}\n      <Suspense fallback={<SpinnerGrid />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"],"names":["MONTNKEY","currentStartDay","getYear","Date","now","getMonth","getDate","props","navigate","useNavigate","dispatch","useDispatch","month","useSelector","state","calendar","year","time","stopUpdateParamas","btnBack","params","useParams","currentDate","includes","result","split","Number","currentMonth","currentYear","currentTime","currentDay","handleCurrentPage","isActive","css","colordisable","className","onClick","getTime","addMonths","type","disabled","xmlns","width","height","fill","stroke","strokeWidth","d","to","data","Suspense","fallback","requiredArgs","required","args","length","TypeError","toInteger","dirtyNumber","NaN","number","isNaN","Math","ceil","floor","dirtyDate","dirtyAmount","arguments","date","toDate","amount","dayOfMonth","endOfDesiredMonth","setMonth","setFullYear","getFullYear","_typeof","obj","Symbol","iterator","constructor","prototype","argument","argStr","Object","toString","call","console","warn","Error","stack"],"sourceRoot":""}