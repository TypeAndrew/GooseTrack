{"version":3,"file":"static/js/897.dc751a7a.chunk.js","mappings":"4NAOO,SAASA,IAEd,IAAMC,GAAWC,EAAAA,EAAAA,MAEVC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAArBF,OAIPG,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,MACV,GAAE,CAACN,IAEJ,IAAMO,GAAeC,EAAAA,EAAAA,cAAY,SAACC,GAEhCT,GAASU,EAAAA,EAAAA,IAAiB,CAAEC,GAAGF,EAAIG,OAAOD,KAE3C,GAAE,CAACX,IAOJ,cACEE,QADF,IACEA,OADF,EACEA,EAAOW,KAAI,SAAAC,GAAO,OAElB,2BAAqB,yBAAMA,EAAQC,SAAY,+BAAOD,EAAQE,iBAC9D,mBAAQC,QAASV,EAAcI,GAAIG,EAAQH,GAAIO,KAAK,SAApD,uBADSJ,EAAQH,GAFC,GAOrB,CChCM,IAAMQ,EAAY,WAErB,IAAMnB,GAAWC,EAAAA,EAAAA,MAEXmB,GAAeZ,EAAAA,EAAAA,cAAY,SAACa,EAAMC,GAEpCtB,GAASuB,EAAAA,EAAAA,IAAe,CAAEF,KAAMA,EAAKG,MAAOF,OAAQA,EAAOE,QAE7D,GAAE,CAACxB,IAECyB,GAAOtB,EAAAA,EAAAA,IAAYuB,EAAAA,IAarB,OACI,+BAEI,iBAAMC,SAbD,SAAClB,QACHmB,IAAPnB,GACAA,EAAIoB,iBAER,MAAyBpB,EAAIG,OAArBS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEdF,EAAaC,EAAKC,EACrB,EAMW,UACI,iBAAKQ,MAAO,CAACC,QAAS,QAAtB,WACA,4BACI,qCAGA,kBAEIb,KAAK,OACLG,KAAK,OACLG,MAAOC,EAAKJ,KACZW,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAKhB,4BACI,sCACA,kBAEIhB,KAAK,MACLG,KAAK,SACLG,MAAOC,EAAKH,OACZU,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAKhB,mBAAShB,KAAK,SAAd,4BAMnB,EC5CD,EArBkB,WAGhB,OACE,iCACE,eAAIY,MAAO,CAACC,QAAS,OACfI,eAAgB,SAChBC,YAAa,SACbC,aAAc,MACdC,MAAO,QACPC,WAAY,cALlB,wBAMM,SAACpB,EAAD,KACA,eAAIW,MAAO,CAACC,QAAS,OAAQI,eAAgB,UAA7C,wBAEA,yBACA,SAAEpC,EAAF,QAIX,C","sources":["components/Tasks/Tasks.jsx","components/TasksForm/TasksForm.jsx","pages/TasksPage/TasksPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useCallback, useEffect} from 'react';\nimport { useSelector,useDispatch  } from 'react-redux';\nimport { getTasksThunk, deleteTasksThunk } from 'Redux/tasks/tasks.thunk';\nimport {  getTasks } from 'Redux/tasks/tasks.selectors';\n//import {  selectFilteredTasks, getTasks } from 'Redux/tasks/tasks.selectors';\n\nexport function Tasks()  {\n\n  const dispatch = useDispatch();\n \n  const {users} = useSelector(getTasks);\n  \n  \n\n  useEffect(() => {\n    dispatch(getTasksThunk());\n  }, [dispatch]);\n\n  const handleDelete = useCallback((evt) => {\n        \n    dispatch(deleteTasksThunk({ id:evt.target.id } )) \n        \n  }, [dispatch]);  \n    \n  //replace funcion on selector\n  /*const getFilterValueOn = (element) => {\n      return element.name.toLowerCase().includes(filter.toLowerCase())\n  }*/\n  \n  return (\n    users?.map(element => \n   // getFilterValueOn(element) && replace funcion on selector\n    <li key={element.id}><div>{element.email}</div><div> {element.subscription}</div>\n    <button onClick={handleDelete} id={element.id} type=\"button\" >delete </button></li>\n    )\n  )\n     \n}\n    \nTasks.propTypes = {\n    element: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    }),\n  onDelete: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useCallback } from 'react';\nimport { getTask } from '../../Redux/tasks/tasks.selectors';\nimport { postTasksThunk } from 'Redux/tasks/tasks.thunk';\n\nexport const TasksForm = () => {\n    \n    const dispatch = useDispatch();\n    \n    const handleSubmit = useCallback((name, number) => {\n    \n        dispatch(postTasksThunk({ name: name.value, number: number.value }))\n    \n     }, [dispatch])\n    \n    const task = useSelector(getTask);     \n\n    \n    const onSubmit = (evt) =>{\n        if (evt !==undefined) {\n            evt.preventDefault();\n        }\n        const { name, number } = evt.target;\n        \n        handleSubmit(name,number);\n    }\n\n\n        return (\n            <>\n        \n                <form onSubmit={onSubmit}>\n                    <div style={{display: 'flex'}}>\n                    <div>\n                        <label>Name</label>\n            \n               \n                        <input \n                  \n                            type=\"text\"\n                            name=\"name\"\n                            value={task.name}\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                        \n                        />\n                    </div>\n            \n                    <div>\n                        <label>Phone</label>\n                        <input \n                \n                            type=\"tel\"\n                            name=\"number\"\n                            value={task.number}\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            required\n                        />\n                    </div>\n           \n    \n                    <button  type=\"submit\">Add Task</button>\n                    </div>\n                </form>\n            </>\n        )\n  \n}    \n\nTasksForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n","import { Tasks } from '../../components/Tasks/Tasks';\nimport { TasksForm } from '../../components/TasksForm/TasksForm';\n//import { Filter } from '../../components/Filter/Filter';\n\n\nconst TasksPage = () => {\n \n\n  return (\n    <>\n      <h1 style={{display: 'flex',\n            justifyContent: 'center',\n            borderStyle: 'outset',\n            borderRadius: '10%',\n            color: 'white',\n            background: 'dodgerblue',}}>Taskbook </h1>\n            <TasksForm   />\n            <h2 style={{display: 'flex', justifyContent: 'center'}}>Contacts </h2>\n\n            <ul>\n            < Tasks />\n            </ul>\n    </>\n  );\n};\n\nexport default TasksPage;"],"names":["Tasks","dispatch","useDispatch","users","useSelector","getTasks","useEffect","getTasksThunk","handleDelete","useCallback","evt","deleteTasksThunk","id","target","map","element","email","subscription","onClick","type","TasksForm","handleSubmit","name","number","postTasksThunk","value","task","getTask","onSubmit","undefined","preventDefault","style","display","pattern","title","required","justifyContent","borderStyle","borderRadius","color","background"],"sourceRoot":""}