{"version":3,"file":"static/js/481.f79ed40c.chunk.js","mappings":"yRAUaA,EAAW,WACpB,OAAsCC,EAAAA,EAAAA,UAAS,IAAIC,MAAnD,eAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAWC,EAAAA,EAAqBH,GAEhCI,EAAUD,EAAAA,EAAuBH,GAEjCK,EAAYF,EAAAA,EAAoBD,GAEhCI,EAAUH,EAAAA,EAAsBC,GAEhCG,EAAYJ,EAAAA,EAA0B,CAAEK,MAAOH,EAAWI,IAAKH,IAC/DI,EAAS,SAAAC,GAEP,IADJ,IAAMD,EAAQ,GACDE,EAAM,EAAGA,GAAO,EAAGA,IACxBF,EAAMG,KAAKN,EAAUK,IAE7B,OAAOF,CACV,CANc,GAQf,OACA,4BACI,iBAAKI,MAAO,CAAEC,QAAS,OAAQC,eAAgB,eAAgBC,OAAQ,UAAvE,WACI,mBAAQC,QAAS,kBAAMjB,EAAeE,EAAAA,EAAkBH,EAAa,GAApD,EAAjB,mBACI,4BACCG,EAAAA,EAAeH,EA7BV,OA4BN,IAC8CG,EAAAA,EAAeH,EA9BxD,WAgCT,mBAAQkB,QAAS,kBAAKjB,EAAeE,EAAAA,EAAmBH,EAAa,GAApD,EAAjB,sBAEA,iBAAKc,MAAO,CAAEC,QAAS,OAAQI,oBAAqB,iBAAkBC,IAAK,QAA3E,UACEV,EAAMW,KAAI,SAAAC,GAAI,OAChB,0BAAkBnB,EAAAA,EAAemB,EAlCxB,SAkCEA,EADK,IAGff,EAAUc,KAAI,SAAAV,GAAI,OACf,gCAAmBR,EAAAA,EAAeQ,EApC9B,OAoCOA,EADI,SAM9B,EClCD,EAZqB,WAGnB,OACE,iCACE,wCACA,SAACd,EAAD,MAIL,C","sources":["components/Calendar/Calendar.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["\nimport { useState } from 'react';\nimport * as dateFns from 'date-fns';\n\n\nconst formatofYear = 'yyy';\nconst formatOfMonth = 'MMM';\nconst formatofWeek = 'EEEE';\nconst formatOfDay = 'd';\n\nexport const Calendar = () => {\n    const [currentDate, setCurrentDate] = useState(new Date());\n    //Find the first day of current Date\n    const firstDay = dateFns.startOfMonth(currentDate);\n    //Find the last day of current Date\n    const lastDay = dateFns.lastDayOfMonth(currentDate);\n    ////Ein Find the first day of week of firstDay\n    const startDate = dateFns.startOfWeek(firstDay);\n    //Find the last day of week of lastDay\n    const endDate = dateFns.lastDayOfWeek(lastDay);\n    //render all days\n    const totalDate = dateFns.eachDayOfInterval({ start: startDate, end: endDate });\n    const weeks = (date => {\n        const weeks = [];\n            for (let day = 1; day <= 7; day++) {\n                weeks.push(totalDate[day]);\n            }\n        return weeks;\n    })(currentDate);\n    \n    return (\n    <div>\n        <div style={{ display: 'flex', justifyContent: 'space-around', margin: '1rem 0' }}>\n            <button onClick={() => setCurrentDate(dateFns.subMonths(currentDate, 1))}>last</button>\n                <span>\n                {dateFns.format(currentDate, formatOfMonth)} {dateFns.format(currentDate, formatofYear)}\n                </span>\n            <button onClick={()=> setCurrentDate(dateFns.addMonths (currentDate, 1)) }>next</button>\n        </div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '1rem' }}>\n            { weeks.map(week => (\n            <span key={week}>{dateFns.format(week,formatofWeek)}</span>\n            ))}\n            {totalDate.map(date => (\n                <span key={date}> {dateFns.format(date, formatOfDay)}</span>\n            ))}\n            </div>\n        </div>\n    ); \n};\n\n// export default Calendar;","\nimport { Calendar }  from 'components/Calendar/Calendar';\n\nconst CalendarPage = () => {\n \n\n  return (\n    <>\n      <h1> CALENDAR </h1>\n      <Calendar/>   \n    </>\n  );\n  \n};\n\nexport default CalendarPage;"],"names":["Calendar","useState","Date","currentDate","setCurrentDate","firstDay","dateFns","lastDay","startDate","endDate","totalDate","start","end","weeks","date","day","push","style","display","justifyContent","margin","onClick","gridTemplateColumns","gap","map","week"],"sourceRoot":""}